@inherits LayoutComponentBase
@inject IJSRuntime JS
@implements IAsyncDisposable

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">BlazorApp</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-16 mb-16 docs-footer">
            <MudGrid Justify="Justify.Center">
                <MudElement>Copyright © @_year Share the ❤️ via hippieZhou</MudElement>
            </MudGrid>
        </MudContainer>
        <MudScrollToTop>
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowUpward" />
        </MudScrollToTop>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private int _year;

    private Lazy<IJSObjectReference> MainLayoutModule = new();

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/MainLayout.razor.js");
            MainLayoutModule = new Lazy<IJSObjectReference>(module);
            
            var runTime = System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription;
            await MainLayoutModule.Value.InvokeVoidAsync("SayHelloFromJs", $"Powered by {runTime!}");
        }
    }

    protected override Task OnInitializedAsync()
    {
        _year = DateTime.Now.Year;
        return base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (MainLayoutModule.IsValueCreated)
        {
            await MainLayoutModule.Value.DisposeAsync();
        }
    }
}